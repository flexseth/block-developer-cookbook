# Overview

In this recipe, you will create a custom format to mark text as an acronym by wrapping it in an `<abbr>` tag and providing an explanation that is displayed using the `title` attribute using the `<Popover>` component.


## Step 1 - Preparing the build process

There are no blocks in the recipe so you will need to modify the build process to target the file we need. Open the `package.json` file make the following changes the the `build` a `start` commands:

```json
"build": "wp-scripts build ./src/word-counter.js",
"start": "wp-scripts start ./src/word-counter.js"
```

This will tell the `@wordpress/scripts` package to process the file found at `./src/word-counter.js`. We could also name this file `index.js` and call the scripts without any parameters, but this way the files output are named `word-counter.(js|css)`.

Run `npm start` to start the build process.

## Step 2 - Setting up the enqueues

Now that you're successfully building the script, you need to enqueue the build file in the block editor.

Add the following to the main php file of the plugin.

```php
add_action( 'enqueue_block_editor_assets', __NAMESPACE__ . '\enqueue_files_for_word_counter' );

/**
 * Enqueue the files for the format.
 */
function enqueue_files_for_word_counter() {
	$word_counter_file = plugin_dir_path( __FILE__ ) . '/build/word-counter.asset.php';

	if ( file_exists( $word_counter_file ) ) {
		$assets = include $word_counter_file;
		wp_enqueue_script(
			'word-counter',
			plugin_dir_url( __FILE__ ) . 'build/word-counter.js',
			$assets['dependencies'],
			$assets['version'],
			true
		);
	}
}
```

This code checks to make sure that the `word-counter.asset.php` generated when you ran the build process is in place. Then if that file exists, it enqueues the JS file in the block editor.

## Step 3 - Registering the SlotFill plugin.

We need our code to run inside the block editor and display some information to the user. To do that we're going to leverage the SlotFill system.

We're going to use the `PluginPostStatusInfo` slot that appears in the Summary panel in the block editor.

In order to register our fill for that slot, we need to use the registerPlugin function from the `@wordpress/plugins` package which accepts two parameters:

1. A string representing the name of the name of the plugin
2. An object of settings for the plugin

Add the following to `./src/word-counter.js`

```js
```



